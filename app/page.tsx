'use client';

import React, { useState, useEffect } from 'react';
import { Menu, X, Upload, MessageCircle, Mic, FileCheck, Bell, ScanLine, Volume2, HelpCircle,
         Search, Star, Users, Award, TrendingUp, Globe, Shield, Heart, BookOpen, 
         Home as HomeIcon, Briefcase, Zap, Download, Wifi, WifiOff, Clock, Target,
         Activity, BarChart3, User, Sparkles, ChevronRight, Smartphone, FileText,
         Clipboard } from 'lucide-react';
import { FaGoogle } from 'react-icons/fa';
import { signIn, signOut, useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { useLanguage } from '../contexts/language_context';
import { useTheme } from '../contexts/theme_context';
import Link from 'next/link';
import Sidebar from '../components/sidebar_component';
import LanguageToggle from '../components/language_toggle';
import SchemeCarousel from '../components/scheme_carousel';
import UploadModal from '../components/upload_modal';
import SettingsModal from '../components/settings_modal';
import OfflineIndicator from '../components/offline_indicator';

// Design System
const designSystem = {
  colors: {
    primary: '#1E40AF',      // Government blue
    secondary: '#F97316',    // Warm orange  
    success: '#059669',      // Forest green
    warning: '#D97706',      // Amber
    error: '#DC2626',        // Crimson
    neutral: {
      50: '#F8FAFC',
      100: '#F1F5F9',
      200: '#E2E8F0',
      300: '#CBD5E1',
      400: '#94A3B8',
      500: '#64748B',
      600: '#475569',
      700: '#334155',
      800: '#1E293B',
      900: '#0F172A'
    }
  },
  typography: {
    h1: 'text-3xl font-bold',
    h2: 'text-xl font-semibold', 
    body: 'text-base font-normal',
    caption: 'text-sm font-medium'
  },
  spacing: {
    xs: '0.5rem',
    sm: '1rem',
    md: '1.5rem',
    lg: '2rem',
    xl: '3rem'
  },
  borderRadius: {
    sm: '0.375rem',
    md: '0.5rem',
    lg: '0.75rem',
    xl: '1rem'
  }
};

// Phase 4 Enhanced Types
interface UserStats {
  schemesViewed: number;
  applicationsSubmitted: number;
  successfulApplications: number;
  favoriteCategories: string[];
  timeSpentToday: number;
  achievements: string[];
  weeklyProgress: { day: string; schemes: number }[];
}

interface AppMetrics {
  totalUsers: string;
  schemesAvailable: number;
  successfulApplications: string;
  averageProcessingTime: string;
  userSatisfaction: number;
}

export default function HomePage() {
  const router = useRouter();
  const { t, language } = useLanguage();
  const { theme } = useTheme();
  const { data: session, status } = useSession();
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [isHelpOpen, setIsHelpOpen] = useState(false);
  const [helpCategory, setHelpCategory] = useState('general');
  const [showTutorial, setShowTutorial] = useState(false);
  const [tutorialStep, setTutorialStep] = useState(0);
  const [isSignInOpen, setIsSignInOpen] = useState(false);
  const [isSignUpOpen, setIsSignUpOpen] = useState(false);
  
  // Phase 4 Advanced Features State
  const [searchQuery, setSearchQuery] = useState('');
  const [isOnline, setIsOnline] = useState(true);
  const [canInstall, setCanInstall] = useState(false);
  const [deferredPrompt, setDeferredPrompt] = useState<any>(null);
  const [userStats, setUserStats] = useState<UserStats | null>(null);
  const [appMetrics, setAppMetrics] = useState<AppMetrics | null>(null);
  const [smartSuggestions, setSmartSuggestions] = useState<string[]>([]);
  const [loadTime, setLoadTime] = useState<number>(0);
  const [showUserDashboard, setShowUserDashboard] = useState(false);
  const [mounted, setMounted] = useState(false);

  // Ensure component is mounted before rendering browser-specific content
  useEffect(() => {
    setMounted(true);
  }, []);

  // Close modals when user successfully authenticates via Google
  useEffect(() => {
    if (status === 'authenticated') {
      setIsSignInOpen(false);
      setIsSignUpOpen(false);
    }
  }, [status]);

  const handleOpenSettings = () => {
    setIsSettingsOpen(true);
    setIsSidebarOpen(false);
  };

  // Comprehensive help content for rural users
  const helpContent = {
    general: {
      title: language === 'hi' ? 'ЁЯПа рдореБрдЦреНрдп рд╕рд╣рд╛рдпрддрд╛' : 'ЁЯПа General Help',
      audio: language === 'hi' 
        ? 'рд╕реНрдХреАрдо рд╕рд╛рдереА рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдпрд╣ рдПрдкреНрдк рдЖрдкрдХреЛ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗрддрд╛ рд╣реИред рдЖрдк рдЕрдкрдиреА рдЬрд╛рдирдХрд╛рд░реА рдЕрдкрд▓реЛрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ, рдЪреИрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ, рдФрд░ рдЕрдкрдиреЗ рдЖрд╡реЗрджрди рджреЗрдЦ рд╕рдХрддреЗ рд╣реИрдВред'
        : 'Welcome to Scheme Saathi. This app helps you find government schemes. You can upload information, chat, and view your applications.',
      steps: language === 'hi' ? [
        'ЁЯУЛ рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ рдЕрдкрдиреА рдЬрд╛рдирдХрд╛рд░реА рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
        'ЁЯТм рд╕рд╡рд╛рд▓ рдкреВрдЫрдиреЗ рдХреЗ рд▓рд┐рдП рдЪреИрдЯ рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ', 
        'ЁЯФН рдЕрдкрдиреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рдпреЛрдЬрдирд╛рдПрдВ рдЦреЛрдЬреЗрдВ',
        'ЁЯУ▒ рдЖрд╡реЗрджрди рдХреА рд╕реНрдерд┐рддрд┐ рдЬрд╛рдВрдЪреЗрдВ'
      ] : [
        'ЁЯУЛ First upload your information',
        'ЁЯТм Use chat to ask questions',
        'ЁЯФН Find suitable schemes for you', 
        'ЁЯУ▒ Check application status'
      ]
    },
    upload: {
      title: language === 'hi' ? 'ЁЯУЛ рдЬрд╛рдирдХрд╛рд░реА рдЕрдкрд▓реЛрдб рдХрд░рдирд╛' : 'ЁЯУЛ Upload Information',
      audio: language === 'hi'
        ? 'рдЬрд╛рдирдХрд╛рд░реА рдЕрдкрд▓реЛрдб рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрд▓реЗ рдмрдЯрди рдХреЛ рджрдмрд╛рдПрдВред рдЕрдкрдирд╛ рдирд╛рдо, рдЙрдореНрд░, рдЖрдзрд╛рд░ рдирдВрдмрд░, рдЖрдп рдФрд░ рдкрддрд╛ рднрд░реЗрдВред рдпрд╣ рдЬрд╛рдирдХрд╛рд░реА рдЖрдкрдХреЛ рд╕рд╣реА рдпреЛрдЬрдирд╛рдПрдВ рд╕реБрдЭрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЬрд░реВрд░реА рд╣реИред'
        : 'To upload information, press the blue button. Fill your name, age, Aadhaar number, income and address. This information is needed to suggest right schemes.',
      steps: language === 'hi' ? [
        'ЁЯФ╡ рдиреАрд▓рд╛ "рдЬрд╛рдирдХрд╛рд░реА рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ" рдмрдЯрди рджрдмрд╛рдПрдВ',
        'тЬПя╕П рд╕рднреА рдЬрд╛рдирдХрд╛рд░реА рд╕рд╣реА-рд╕рд╣реА рднрд░реЗрдВ',
        'ЁЯЖФ рдЖрдзрд╛рд░ рдирдВрдмрд░ 12 рдЕрдВрдХреЛрдВ рдХрд╛ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП',
        'ЁЯТ░ рд╕рд╛рд▓рд╛рдирд╛ рдЖрдп рд░реБрдкрдпреЛрдВ рдореЗрдВ рд▓рд┐рдЦреЗрдВ',
        'тЬЕ "рдЬрдорд╛ рдХрд░реЗрдВ" рдмрдЯрди рджрдмрд╛рдПрдВ'
      ] : [
        'ЁЯФ╡ Press blue "Upload Information" button',
        'тЬПя╕П Fill all information correctly',
        'ЁЯЖФ Aadhaar number should be 12 digits',
        'ЁЯТ░ Write annual income in rupees',
        'тЬЕ Press "Submit" button'
      ]
    },
    chat: {
      title: language === 'hi' ? 'ЁЯТм рдЪреИрдЯ рд╕рд╣рд╛рдпрддрд╛' : 'ЁЯТм Chat Help',
      audio: language === 'hi'
        ? 'рдЪреИрдЯ рдореЗрдВ рдЖрдк рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕рд╡рд╛рд▓ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред рдЬреИрд╕реЗ рдХрд┐рд╕рд╛рди рдпреЛрдЬрдирд╛, рдорд╣рд┐рд▓рд╛ рдпреЛрдЬрдирд╛, рдпрд╛ рдмреБрдЬреБрд░реНрдЧреЛрдВ рдХреЗ рд▓рд┐рдП рдпреЛрдЬрдирд╛ред рдЖрд╕рд╛рди рднрд╛рд╖рд╛ рдореЗрдВ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВред'
        : 'In chat you can ask questions about government schemes. Like farmer schemes, women schemes, or schemes for elderly. Ask questions in simple language.',
      steps: language === 'hi' ? [
        'ЁЯТЪ рд╣рд░рд╛ "рдЯреЗрдХреНрд╕реНрдЯ рдЪреИрдЯрдмреЙрдЯ" рдмрдЯрди рджрдмрд╛рдПрдВ',
        'тЭУ рдЖрд╕рд╛рди рднрд╛рд╖рд╛ рдореЗрдВ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ',
        'ЁЯМ╛ рдЬреИрд╕реЗ: "рдХрд┐рд╕рд╛рди рдХреЗ рд▓рд┐рдП рдХреНрдпрд╛ рдпреЛрдЬрдирд╛ рд╣реИ?"',
        'ЁЯСй "рдорд╣рд┐рд▓рд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рдпреЛрдЬрдирд╛?"',
        'ЁЯТб рдпреЛрдЬрдирд╛ рдХреА рдкреВрд░реА рдЬрд╛рдирдХрд╛рд░реА рдорд┐рд▓реЗрдЧреА'
      ] : [
        'ЁЯТЪ Press green "Text Chatbot" button',
        'тЭУ Ask questions in simple language',
        'ЁЯМ╛ Like: "What schemes for farmers?"',
        'ЁЯСй "Any schemes for women?"',
        'ЁЯТб Get complete scheme information'
      ]
    },
    voice: {
      title: language === 'hi' ? 'ЁЯОд рдЖрд╡рд╛рдЬ рд╕рд╣рд╛рдпрддрд╛' : 'ЁЯОд Voice Help',
      audio: language === 'hi'
        ? 'рдЖрд╡рд╛рдЬ рд╕реЗ рдмрд╛рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмреИрдВрдЧрдиреА рдмрдЯрди рджрдмрд╛рдПрдВред рдлрд┐рд░ рдорд╛рдЗрдХ рдмрдЯрди рджрдмрд╛рдХрд░ рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдмреЛрд▓реЗрдВред рдЖрдк рд╣рд┐рдВрджреА рдпрд╛ рдЕрдВрдЧреНрд░реЗрдЬреА рдореЗрдВ рдмрд╛рдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред'
        : 'To talk with voice, press purple button. Then press mic button and speak your question. You can speak in Hindi or English.',
      steps: language === 'hi' ? [
        'ЁЯЯг рдмреИрдВрдЧрдиреА "рд╡реЙрдпрд╕ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ" рдмрдЯрди рджрдмрд╛рдПрдВ',
        'ЁЯОд рдорд╛рдЗрдХ рдмрдЯрди рджрдмрд╛рдПрдВ',
        'ЁЯЧгя╕П рд╕рд╛рдл рдЖрд╡рд╛рдЬ рдореЗрдВ рд╕рд╡рд╛рд▓ рдмреЛрд▓реЗрдВ',
        'тП╣я╕П рдмрд╛рдд рдЦрддреНрдо рдХрд░рдХреЗ "рд░реБрдХреЗрдВ" рджрдмрд╛рдПрдВ',
        'ЁЯСВ рдЬрд╡рд╛рдм рд╕реБрдиреЗрдВ'
      ] : [
        'ЁЯЯг Press purple "Voice Assistant" button',
        'ЁЯОд Press microphone button',
        'ЁЯЧгя╕П Speak your question clearly',
        'тП╣я╕П Press "Stop" when finished',
        'ЁЯСВ Listen to the answer'
      ]
    },
    documents: {
      title: language === 'hi' ? 'ЁЯУД рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рд╕реНрдХреИрди рдХрд░рдирд╛' : 'ЁЯУД Document Scanning',
      audio: language === 'hi'
        ? 'рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рд╕реНрдХреИрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╣рд░реЗ рд░рдВрдЧ рдХрд╛ OCR рдмрдЯрди рджрдмрд╛рдПрдВред рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб, рд░рд╛рд╢рди рдХрд╛рд░реНрдб, рдпрд╛ рдмреИрдВрдХ рдкрд╛рд╕рдмреБрдХ рдХреА рдлреЛрдЯреЛ рдЦреАрдВрдЪреЗрдВред рдпрд╣ рдЖрдкрдХреА рдЬрд╛рдирдХрд╛рд░реА рдЕрдкрдиреЗ рдЖрдк рднрд░ рджреЗрдЧрд╛ред'
        : 'To scan documents, press green OCR button. Take photo of Aadhaar card, ration card, or bank passbook. It will automatically fill your information.',
      steps: language === 'hi' ? [
        'ЁЯЯв рд╣рд░рд╛ "рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ OCR" рдмрдЯрди рджрдмрд╛рдПрдВ',
        'ЁЯУЛ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ',
        'ЁЯУ╖ рд╕рд╛рдл рдлреЛрдЯреЛ рдЦреАрдВрдЪреЗрдВ рдпрд╛ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
        'тП│ рд╕реНрдХреИрди рд╣реЛрдиреЗ рдХрд╛ рдЗрдВрддрдЬрд╛рд░ рдХрд░реЗрдВ',
        'тЬЕ рдЬрд╛рдирдХрд╛рд░реА рдЪреЗрдХ рдХрд░реЗрдВ рдФрд░ рд╕реЗрд╡ рдХрд░реЗрдВ'
      ] : [
        'ЁЯЯв Press green "Document OCR" button',
        'ЁЯУЛ Choose document type',
        'ЁЯУ╖ Take clear photo or upload',
        'тП│ Wait for scanning',
        'тЬЕ Check information and save'
      ]
    },
    applications: {
      title: language === 'hi' ? 'ЁЯУ▒ рдЖрд╡реЗрджрди рджреЗрдЦрдирд╛' : 'ЁЯУ▒ View Applications',
      audio: language === 'hi'
        ? 'рдЕрдкрдиреЗ рдЖрд╡реЗрджрди рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдкреАрд▓рд╛ рдмрдЯрди рджрдмрд╛рдПрдВред рдпрд╣рд╛рдВ рдЖрдк рджреЗрдЦ рд╕рдХрддреЗ рд╣реИрдВ рдХрд┐ рдЖрдкрдХрд╛ рдЖрд╡реЗрджрди рдХрд╣рд╛рдВ рддрдХ рдкрд╣реБрдВрдЪрд╛ рд╣реИред рд▓рдВрдмрд┐рдд, рд╕реНрд╡реАрдХреГрдд рдпрд╛ рдЕрд╕реНрд╡реАрдХреГрдд рдХреА рдЬрд╛рдирдХрд╛рд░реА рдорд┐рд▓реЗрдЧреАред'
        : 'To view applications, press yellow button. Here you can see how far your application has reached. You will get information about pending, approved or rejected status.',
      steps: language === 'hi' ? [
        'ЁЯЯб рдкреАрд▓рд╛ "рдЖрд╡реЗрджрди рдЯреНрд░реИрдХрд░" рдмрдЯрди рджрдмрд╛рдПрдВ',
        'ЁЯУЛ рдЕрдкрдиреЗ рд╕рднреА рдЖрд╡реЗрджрди рджреЗрдЦреЗрдВ',
        'ЁЯФН рд╕реНрдерд┐рддрд┐ рдЪреЗрдХ рдХрд░реЗрдВ (рд▓рдВрдмрд┐рдд/рд╕реНрд╡реАрдХреГрдд)',
        'ЁЯУЕ рдЕрдЧрд▓реА рдбреЗрдЯ рдХреА рдЬрд╛рдирдХрд╛рд░реА рд▓реЗрдВ',
        'ЁЯУЮ рдЬрд░реВрд░рдд рд╣реЛ рддреЛ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ'
      ] : [
        'ЁЯЯб Press yellow "Application Tracker" button',
        'ЁЯУЛ View all your applications',
        'ЁЯФН Check status (pending/approved)',
        'ЁЯУЕ Get next date information',
        'ЁЯУЮ Contact if needed'
      ]
    },
    offline: {
      title: language === 'hi' ? 'ЁЯУ╢ рдСрдлрд╝рд▓рд╛рдЗрди рдореЛрдб' : 'ЁЯУ╢ Offline Mode',
      audio: language === 'hi'
        ? 'рдЗрдВрдЯрд░рдиреЗрдЯ рди рд╣реЛрдиреЗ рдкрд░ рднреА рдЖрдк рдХреБрдЫ рдХрд╛рдо рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред рдкрд╣рд▓реЗ рд╕реЗ рд╕реЗрд╡ рдХреА рдЧрдИ рдЬрд╛рдирдХрд╛рд░реА рджреЗрдЦ рд╕рдХрддреЗ рд╣реИрдВ, рдлреЙрд░реНрдо рднрд░ рд╕рдХрддреЗ рд╣реИрдВред рдирдпрд╛ рдЖрд╡реЗрджрди рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рдЗрдВрдЯрд░рдиреЗрдЯ рдЪрд╛рд╣рд┐рдПред'
        : 'Even without internet you can do some work. You can view previously saved information, fill forms. Internet is needed to submit new applications.',
      steps: language === 'hi' ? [
        'ЁЯУ▒ рдСрдлрд╝рд▓рд╛рдЗрди рдореЛрдб рдЕрдкрдиреЗ рдЖрдк рдЪрд╛рд▓реВ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ',
        'тЬЕ рдкреБрд░рд╛рдирд╛ рдбреЗрдЯрд╛ рджреЗрдЦ рд╕рдХрддреЗ рд╣реИрдВ',
        'тЬЕ рдлреЙрд░реНрдо рднрд░ рд╕рдХрддреЗ рд╣реИрдВ',
        'тЬЕ рдпреЛрдЬрдирд╛ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкрдврд╝ рд╕рдХрддреЗ рд╣реИрдВ',
        'тЭМ рдирдпрд╛ рдЖрд╡реЗрджрди рдирд╣реАрдВ рднреЗрдЬ рд╕рдХрддреЗ'
      ] : [
        'ЁЯУ▒ Offline mode starts automatically',
        'тЬЕ Can view old data',
        'тЬЕ Can fill forms',
        'тЬЕ Can read scheme information',
        'тЭМ Cannot submit new applications'
      ]
    },
    troubleshooting: {
      title: language === 'hi' ? 'ЁЯФз рд╕рдорд╕реНрдпрд╛ рд╕рдорд╛рдзрд╛рди' : 'ЁЯФз Troubleshooting',
      audio: language === 'hi'
        ? 'рдЕрдЧрд░ рдПрдкреНрдк рдореЗрдВ рдХреЛрдИ рд╕рдорд╕реНрдпрд╛ рдЖ рд░рд╣реА рд╣реИ рддреЛ рдШрдмрд░рд╛рдПрдВ рдирд╣реАрдВред рдЗрдВрдЯрд░рдиреЗрдЯ рдЪреЗрдХ рдХрд░реЗрдВ, рдлреЛрди рд░реАрд╕реНрдЯрд╛рд░реНрдЯ рдХрд░реЗрдВ, рдпрд╛ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВред'
        : 'If you face any problem in the app, do not worry. Check internet, restart phone, or call helpline.',
      steps: language === 'hi' ? [
        'ЁЯУ╢ рдЗрдВрдЯрд░рдиреЗрдЯ рдХрдиреЗрдХреНрд╢рди рдЪреЗрдХ рдХрд░реЗрдВ',
        'ЁЯФД рдПрдкреНрдк рдмрдВрдж рдХрд░рдХреЗ рдлрд┐рд░ рдЦреЛрд▓реЗрдВ',
        'ЁЯУ▒ рдлреЛрди рд░реАрд╕реНрдЯрд╛рд░реНрдЯ рдХрд░реЗрдВ',
        'ЁЯз╣ рдХреИрд╢ рдХреНрд▓рд┐рдпрд░ рдХрд░реЗрдВ',  
        'ЁЯУЮ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 1800-111-3333'
      ] : [
        'ЁЯУ╢ Check internet connection',
        'ЁЯФД Close and reopen app',
        'ЁЯУ▒ Restart phone',
        'ЁЯз╣ Clear cache',
        'ЁЯУЮ Helpline: 1800-111-3333'
      ]
    }
  };

  // Visual tutorial mode
  const tutorialSteps = [
    {
      target: '.upload-button',
      title: language === 'hi' ? 'рдпрд╣рд╛рдВ рдЕрдкрдиреА рдЬрд╛рдирдХрд╛рд░реА рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ' : 'Upload your information here',
      description: language === 'hi' ? 'рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ рдпрд╣рд╛рдВ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ' : 'Click here first'
    },
    {
      target: '.chat-button', 
      title: language === 'hi' ? 'рд╕рд╡рд╛рд▓ рдкреВрдЫрдиреЗ рдХреЗ рд▓рд┐рдП рдЪреИрдЯ рдХрд░реЗрдВ' : 'Chat to ask questions',
      description: language === 'hi' ? 'рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ' : 'Ask about schemes'
    },
    {
      target: '.voice-button',
      title: language === 'hi' ? 'рдЖрд╡рд╛рдЬ рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВ' : 'Talk with voice',
      description: language === 'hi' ? 'рдмреЛрд▓рдХрд░ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ' : 'Ask questions by speaking'
    }
  ];

  const startTutorial = () => {
    setShowTutorial(true);
    setTutorialStep(0);
    setIsHelpOpen(false);
  };

  const nextTutorialStep = () => {
    if (tutorialStep < tutorialSteps.length - 1) {
      setTutorialStep(tutorialStep + 1);
    } else {
      setShowTutorial(false);
      setTutorialStep(0);
    }
  };

  // Context-aware help - detect what user might need help with
  const getContextualHelp = () => {
    if (typeof window === 'undefined') return 'general';
    
    const path = window.location.pathname;
    if (path.includes('/chat')) return 'chat';
    if (path.includes('/voice')) return 'voice';  
    if (path.includes('/ocr')) return 'documents';
    if (path.includes('/applications')) return 'applications';
    if (path.includes('/auth')) return 'general';
    return 'general';
  };

  // Smart help button that opens relevant help
  const openSmartHelp = () => {
    const context = getContextualHelp();
    setHelpCategory(context);
    setIsHelpOpen(true);
    
    // Auto-play audio for immediate help
    setTimeout(() => speakHelp(context), 500);
  };

  // Enhanced audio help with categories
  const speakHelp = (category = helpCategory) => {
    if (typeof window === 'undefined' || !('speechSynthesis' in window)) return;
    
    const content = helpContent[category];
    const utterance = new SpeechSynthesisUtterance(content.audio);
    utterance.lang = language === 'hi' ? 'hi-IN' : 'en-US';
    utterance.rate = 0.8; // Slower for better understanding
    speechSynthesis.speak(utterance);
  };

  // Main action buttons configuration with Indian Flag colors and simplified text
  const getActionColor = (index: number) => {
    const indianFlagColors = [
      { bg: 'bg-orange-500', hover: 'hover:bg-orange-600', text: 'text-orange-500', name: 'Saffron' },    // Upload - Saffron
      { bg: 'bg-green-600', hover: 'hover:bg-green-700', text: 'text-green-600', name: 'Green' },        // Chat - Green
      { bg: 'bg-blue-600', hover: 'hover:bg-blue-700', text: 'text-blue-600', name: 'Navy Blue' },      // Voice - Navy Blue (Chakra)
      { bg: 'bg-orange-600', hover: 'hover:bg-orange-700', text: 'text-orange-600', name: 'Deep Saffron' }, // Applications - Deep Saffron
      { bg: 'bg-green-700', hover: 'hover:bg-green-800', text: 'text-green-700', name: 'Deep Green' },   // Notifications - Deep Green
      { bg: 'bg-blue-700', hover: 'hover:bg-blue-800', text: 'text-blue-700', name: 'Deep Blue' },      // OCR - Deep Blue
    ];
    return indianFlagColors[index] || { bg: 'bg-gray-600', hover: 'hover:bg-gray-700', text: 'text-gray-600', name: 'Default' };
  };

  const mainActions = [
    {
      icon: Upload,
      label: language === 'hi' ? 'рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ' : 'Upload Info',
      description: language === 'hi' ? 'рдЬрд╛рдирдХрд╛рд░реА рдЬреЛрдбрд╝реЗрдВ' : 'Add your details',
      onClick: () => setIsUploadModalOpen(true),
    },
    {
      icon: MessageCircle,
      label: language === 'hi' ? 'рдЪреИрдЯ рдХрд░реЗрдВ' : 'Chat Bot',
      description: language === 'hi' ? 'рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ' : 'Ask questions',
      onClick: () => router.push('/chat'),
    },
    {
      icon: Mic,
      label: language === 'hi' ? 'рдЖрд╡рд╛рдЬрд╝ рд╕рд╣рд╛рдпрдХ' : 'Voice Helper',
      description: language === 'hi' ? 'рдмреЛрд▓рдХрд░ рдкреВрдЫреЗрдВ' : 'Speak to ask',
      onClick: () => router.push('/voice'),
    },
    {
      icon: FileCheck,
      label: language === 'hi' ? 'рдЖрд╡реЗрджрди рдЯреНрд░реИрдХрд░' : 'Track Apps',
      description: language === 'hi' ? 'рд╕реНрдерд┐рддрд┐ рджреЗрдЦреЗрдВ' : 'Check status',
      onClick: () => router.push('/applications'),
    },
    {
      icon: Bell,
      label: language === 'hi' ? 'рдЕрд▓рд░реНрдЯ' : 'Alerts',
      description: language === 'hi' ? 'рдирдИ рд╕реВрдЪрдирд╛' : 'Get updates',
      onClick: () => router.push('/notifications'),
    },
    {
      icon: ScanLine,
      label: language === 'hi' ? 'рд╕реНрдХреИрди рдХрд░реЗрдВ' : 'Scan Docs',
      description: language === 'hi' ? 'рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдкрдврд╝реЗрдВ' : 'Read documents',
      onClick: () => router.push('/ocr'),
    },
  ];

  const handleSignIn = (credentials: any) => {
    // Mock authentication for regular email/password - replace with real auth logic
    console.log('User signed in:', credentials);
    setIsSignInOpen(false);
  };

  const handleSignUp = (userData: any) => {
    // Mock registration for regular email/password - replace with real auth logic
    console.log('User signed up:', userData);
    setIsSignUpOpen(false);
  };

  const handleGoogleSignIn = () => {
    // Check if Google OAuth is configured
    const isConfigured = process.env.NODE_ENV === 'development' 
      ? true // In development, we'll let NextAuth handle the error
      : true; // In production, add actual check
      
    if (!isConfigured) {
      alert('Google OAuth is not configured yet. Please contact the developer.');
      return;
    }
    
    signIn('google', { callbackUrl: '/' });
  };

  const handleSignOut = () => {
    signOut({ callbackUrl: '/' });
  };

  // Phase 4 Enhanced Features
  useEffect(() => {
    if (!mounted) return;
    
    // Track page load time
    const startTime = performance.now();
    
    // Register service worker
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/sw.js')
        .then((registration) => {
          console.log('SW registered: ', registration);
        })
        .catch((registrationError) => {
          console.log('SW registration failed: ', registrationError);
        });
    }

    // Listen for install prompt
    const handleBeforeInstall = (e: Event) => {
      e.preventDefault();
      setDeferredPrompt(e);
      setCanInstall(true);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstall);

    // Monitor online status
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    setIsOnline(navigator.onLine);

    // Load user data and metrics
    loadUserData();
    loadAppMetrics();
    loadSmartSuggestions();

    // Track analytics
    trackPageView();

    // Calculate load time
    const handleLoad = () => {
      const endTime = performance.now();
      setLoadTime(Math.round(endTime - startTime));
    };

    if (document.readyState === 'complete') {
      handleLoad();
    } else {
      window.addEventListener('load', handleLoad);
    }

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstall);
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      window.removeEventListener('load', handleLoad);
    };
  }, [mounted]);

  const loadUserData = async () => {
    try {
      const response = await fetch('/api/user/stats');
      if (response.ok) {
        const data = await response.json();
        setUserStats(data.stats);
        setShowUserDashboard(data.stats && data.stats.schemesViewed > 0);
      }
    } catch (error) {
      console.error('Error loading user stats:', error);
    }
  };

  const loadAppMetrics = async () => {
    try {
      const response = await fetch('/api/metrics/app');
      if (response.ok) {
        const data = await response.json();
        setAppMetrics(data.metrics);
      }
    } catch (error) {
      console.error('Error loading app metrics:', error);
    }
  };

  const loadSmartSuggestions = async () => {
    try {
      const response = await fetch('/api/search/smart?suggestions=true');
      if (response.ok) {
        const data = await response.json();
        setSmartSuggestions(data.suggestions || []);
      }
    } catch (error) {
      console.error('Error loading smart suggestions:', error);
    }
  };

  const trackPageView = async () => {
    try {
      await fetch('/api/analytics/track', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          event: 'page_view',
          page: 'home',
          timestamp: new Date().toISOString(),
          metadata: {
            loadTime,
            userAgent: navigator.userAgent,
            language: language
          }
        })
      });
    } catch (error) {
      console.error('Error tracking page view:', error);
    }
  };

  const handleInstallPWA = async () => {
    if (deferredPrompt) {
      deferredPrompt.prompt();
      const { outcome } = await deferredPrompt.userChoice;
      
      if (outcome === 'accepted') {
        console.log('PWA installed');
        trackEvent('pwa_installed');
      }
      
      setDeferredPrompt(null);
      setCanInstall(false);
    }
  };

  const trackEvent = async (eventName: string, metadata?: any) => {
    try {
      await fetch('/api/analytics/track', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          event: eventName,
          page: 'home',
          timestamp: new Date().toISOString(),
          metadata
        })
      });
    } catch (error) {
      console.error('Error tracking event:', error);
    }
  };

  const handleSearch = async (e: React.FormEvent) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      await trackEvent('search_performed', { query: searchQuery });
      router.push(`/schemes?search=${encodeURIComponent(searchQuery)}`);
    }
  };

  const handleSmartSuggestionClick = async (suggestion: string) => {
    setSearchQuery(suggestion);
    await trackEvent('smart_suggestion_used', { suggestion });
  };

  // Don't render browser-specific content until mounted
  if (!mounted) {
    return (
      <div className="min-h-screen bg-neutral-50 dark:bg-neutral-900">
        <header className="bg-white dark:bg-neutral-800 border-b border-neutral-200 dark:border-neutral-700 shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between h-16">
              <button className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-700 transition-colors">
                <Menu size={20} className="text-neutral-700 dark:text-neutral-300" />
              </button>
              <h1 className="text-3xl font-bold text-blue-600">
                Scheme Saathi
              </h1>
              <div className="flex items-center gap-2">
                <button className="px-3 py-1.5 text-sm font-medium text-blue-600">
                  Sign In
                </button>
                <button className="px-3 py-1.5 text-sm font-medium bg-blue-600 text-white rounded-md">
                  Sign Up
                </button>
                <button className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-700 transition-colors">
                  <Globe size={16} className="text-neutral-700 dark:text-neutral-300" />
                </button>
                <button className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-700 transition-colors">
                  <X size={20} className="text-neutral-700 dark:text-neutral-300" />
                </button>
              </div>
            </div>
          </div>
        </header>
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-2 text-neutral-600">Loading...</p>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-neutral-50 dark:bg-neutral-900">
      {/* Phase 4: PWA Status Bar - Only show when mounted */}
      {mounted && !isOnline && (
        <div className="bg-warning text-black text-center py-2 px-4 text-sm font-medium">
          <WifiOff className="inline-block w-4 h-4 mr-2" />
          {language === 'hi' ? 'рдЖрдк рдСрдлрд╝рд▓рд╛рдЗрди рд╣реИрдВред рдХреБрдЫ рд╕реБрд╡рд┐рдзрд╛рдПрдВ рд╕реАрдорд┐рдд рд╣реЛ рд╕рдХрддреА рд╣реИрдВред' : 'You\'re offline. Some features may be limited.'}
        </div>
      )}
      
      {mounted && canInstall && (
        <div className="bg-primary text-white text-center py-2 px-4 text-sm font-medium">
          <Smartphone className="inline-block w-4 h-4 mr-2" />
          {language === 'hi' ? 'рдмреЗрд╣рддрд░ рдЕрдиреБрднрд╡ рдХреЗ рд▓рд┐рдП Scheme-Saathi рдЗрдВрд╕реНрдЯреЙрд▓ рдХрд░реЗрдВ' : 'Install Scheme-Saathi for a better experience'}
          <button 
            onClick={handleInstallPWA}
            className="ml-4 bg-white text-primary px-3 py-1 rounded text-xs font-medium hover:bg-neutral-100 transition-colors"
          >
            {language === 'hi' ? 'рдЗрдВрд╕реНрдЯреЙрд▓ рдХрд░реЗрдВ' : 'Install'}
          </button>
        </div>
      )}

      {/* Simplified Header */}
      <header className="bg-white dark:bg-neutral-800 border-b border-neutral-200 dark:border-neutral-700 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            {/* Left - Hamburger Menu */}
            <button
              onClick={() => setIsSidebarOpen(true)}
              className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-700 transition-colors"
              aria-label="Open menu"
            >
              <Menu size={20} className="text-neutral-700 dark:text-neutral-300" />
            </button>

            {/* Center - App Title */}
            <div className="flex-1 flex justify-center">
              <h1 className="text-3xl font-bold text-blue-600">
                Scheme Saathi
              </h1>
            </div>

            {/* Right - Authentication, Language Toggle and Close Button */}
            <div className="flex items-center gap-2">
              {mounted && status === 'unauthenticated' ? (
                <>
                  <button
                    onClick={() => setIsSignInOpen(true)}
                    className="px-3 py-1.5 text-sm font-medium text-blue-600 hover:text-blue-700 transition-colors"
                  >
                    {language === 'hi' ? 'рд╕рд╛рдЗрди рдЗрди' : 'Sign In'}
                  </button>
                  <button
                    onClick={() => setIsSignUpOpen(true)}
                    className="px-3 py-1.5 text-sm font-medium bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                  >
                    {language === 'hi' ? 'рд╕рд╛рдЗрди рдЕрдк' : 'Sign Up'}
                  </button>
                </>
              ) : mounted && status === 'authenticated' && session?.user ? (
                <div className="flex items-center gap-2">
                  <span className="text-sm text-neutral-600 dark:text-neutral-300">
                    {language === 'hi' ? 'рдирдорд╕реНрддреЗ' : 'Hello'}, {session.user.name || session.user.email}
                  </span>
                  <button
                    onClick={handleSignOut}
                    className="px-3 py-1.5 text-sm font-medium text-red-600 hover:text-red-700 transition-colors"
                  >
                    {language === 'hi' ? 'рд╕рд╛рдЗрди рдЖрдЙрдЯ' : 'Sign Out'}
                  </button>
                </div>
              ) : null}
              <LanguageToggle />
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Simplified Rural Appeal Banner */}
        <div className="bg-blue-600 text-white p-4 rounded-lg mb-8 border-l-4 border-orange-500">
          <div className="flex items-center gap-3">
            <span className="text-2xl">ЁЯЗоЁЯЗ│</span>
            <div>
              <h2 className="text-xl font-semibold text-white">
                {language === 'hi' ? 'рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рд╕рд╣рд╛рдпрдХ' : 'Government Scheme Assistant'}
              </h2>
              <p className="text-sm font-medium text-neutral-100">
                {language === 'hi' ? 'рдЧрд╛рдВрд╡ рдХреЗ рд▓рд┐рдП, рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП, рдЖрдкрдХреЗ рд▓рд┐рдП' : 'For villages, for farmers, for you'}
              </p>
            </div>
          </div>
        </div>

        {/* Hero Section with Main Actions */}
        <section className="text-center mb-16">
          <div className="mb-12">
            <h2 className="text-4xl md:text-5xl font-bold mb-4 text-neutral-900 dark:text-white">
              {language === 'hi' ? 'рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ рдЦреЛрдЬреЗрдВ' : 'Discover Government Schemes'}
            </h2>
            <p className="text-base font-normal text-neutral-600 dark:text-neutral-300 max-w-3xl mx-auto leading-relaxed mb-2">
              {language === 'hi' ? 'рдЖрдкрдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рдпреЛрдЬрдирд╛рдУрдВ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ' : 'Find suitable schemes designed for you'}
            </p>
            <div className="flex items-center justify-center gap-2 text-sm text-neutral-500 dark:text-neutral-400">
              <span className="w-3 h-2 bg-orange-500 rounded-sm"></span>
              <span className="w-3 h-2 bg-white border border-neutral-300 rounded-sm"></span>
              <span className="w-3 h-2 bg-green-600 rounded-sm"></span>
              <span className="ml-2">{language === 'hi' ? 'рддрд┐рд░рдВрдЧреЗ рдХреА рднрд╛рд╡рдирд╛ рдХреЗ рд╕рд╛рде' : 'Inspired by Tricolor'}</span>
            </div>
          </div>

          {/* Simplified Smart Search */}
          <div className="mb-8 max-w-2xl mx-auto">
            <form onSubmit={handleSearch} className="relative">
              <div className="relative">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-neutral-400 w-5 h-5" />
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder={language === 'hi' ? 'рдпреЛрдЬрдирд╛рдУрдВ рдХреА рдЦреЛрдЬ рдХрд░реЗрдВ...' : 'Search for schemes...'}
                  className="w-full pl-12 pr-4 py-3 rounded-lg border border-neutral-300 dark:border-neutral-600 bg-white dark:bg-neutral-800 text-neutral-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent transition-all"
                />
                <button
                  type="submit"
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 px-4 py-1.5 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm"
                >
                  {language === 'hi' ? 'рдЦреЛрдЬреЗрдВ' : 'Search'}
                </button>
              </div>
            </form>
            
            {/* Simplified suggestions */}
            {smartSuggestions.length > 0 && (
              <div className="mt-3 flex flex-wrap gap-2 justify-center">
                {smartSuggestions.slice(0, 4).map((suggestion, index) => (
                  <button
                    key={index}
                    onClick={() => handleSmartSuggestionClick(suggestion)}
                    className="px-3 py-1 rounded-full text-sm bg-neutral-100 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-200 hover:bg-blue-600 hover:text-white transition-all"
                  >
                    {suggestion}
                  </button>
                ))}
              </div>
            )}
          </div>

          {/* Clean User Dashboard */}
          {showUserDashboard && userStats && (
            <div className="mb-8 max-w-4xl mx-auto p-6 rounded-xl bg-white dark:bg-neutral-800 shadow-sm border border-neutral-200 dark:border-neutral-700">
              <h2 className="text-xl font-semibold text-center mb-6 text-neutral-900 dark:text-white">
                {language === 'hi' ? 'рдЖрдкрдХреА рдЧрддрд┐рд╡рд┐рдзрд┐' : 'Your Activity'}
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {[
                  { 
                    value: userStats.schemesViewed, 
                    label: language === 'hi' ? 'рджреЗрдЦреА рдЧрдИ рдпреЛрдЬрдирд╛рдПрдВ' : 'Schemes Viewed',
                    color: 'text-blue-600'
                  },
                  { 
                    value: userStats.applicationsSubmitted, 
                    label: language === 'hi' ? 'рдЬрдорд╛ рдХрд┐рдП рдЧрдП рдЖрд╡реЗрджрди' : 'Applications Submitted',
                    color: 'text-green-600'
                  },
                  { 
                    value: userStats.timeSpentToday, 
                    label: language === 'hi' ? 'рдЖрдЬ рдХрд╛ рд╕рдордп (рдорд┐рдирдЯ)' : 'Time Today (mins)',
                    color: 'text-orange-500'
                  }
                ].map((stat, index) => (
                  <div key={index} className="text-center">
                    <div className={`text-3xl font-bold ${stat.color} mb-2`}>{stat.value}</div>
                    <div className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                      {stat.label}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Professional Indian Flag Themed Action Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto mb-16">
            {mainActions.map((action, index) => {
              let buttonClass = '';
              if (index === 0) buttonClass = 'upload-button';
              if (index === 1) buttonClass = 'chat-button';
              if (index === 2) buttonClass = 'voice-button';
              
              const colors = getActionColor(index);
              
              return (
                <button
                  key={index}
                  onClick={action.onClick}
                  className={`${buttonClass} group relative overflow-hidden p-8 rounded-2xl text-white transition-all duration-300 hover:scale-[1.02] hover:shadow-2xl ${colors.bg} ${colors.hover} ${
                    showTutorial && tutorialSteps[tutorialStep]?.target === `.${buttonClass}` 
                      ? 'ring-4 ring-yellow-400 ring-opacity-75 z-50 relative' 
                      : ''
                  }`}
                >
                  {/* Professional gradient overlay */}
                  <div className="absolute inset-0 bg-gradient-to-br from-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  
                  <div className="relative flex flex-col items-center text-center">
                    {/* Icon container with professional styling */}
                    <div className="p-4 bg-white/20 rounded-xl mb-6 group-hover:bg-white/30 transition-all duration-300 backdrop-blur-sm">
                      <action.icon size={28} className="drop-shadow-sm" />
                    </div>
                    
                    {/* Title with better typography */}
                    <h3 className="text-xl font-bold mb-3 tracking-wide">
                      {action.label}
                    </h3>
                    
                    {/* Simplified description */}
                    <p className="text-sm opacity-90 font-medium leading-relaxed">
                      {action.description}
                    </p>

                    {/* Professional bottom accent */}
                    <div className="absolute bottom-0 left-0 right-0 h-1 bg-white/30 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300"></div>
                  </div>
                </button>
              );
            })}
          </div>
        </section>

        {/* Schemes Carousel Section */}
        <section className="mb-8">
          <SchemeCarousel />
        </section>

        {/* Simplified Quick Stats */}
        <section className="bg-white dark:bg-neutral-800 rounded-xl shadow-sm border border-neutral-200 dark:border-neutral-700 p-8 mb-12">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-6 text-center">
            {[
              { value: '500+', label: language === 'hi' ? 'рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ' : 'Government Schemes', color: 'text-blue-600' },
              { value: '50L+', label: language === 'hi' ? 'рдирд╛рдЧрд░рд┐рдХреЛрдВ рдХреА рдорджрдж' : 'Citizens Helped', color: 'text-green-600' },
              { value: '24/7', label: language === 'hi' ? 'AI рд╕рд╣рд╛рдпрддрд╛' : 'AI Support', color: 'text-orange-500' },
              { value: '12', label: language === 'hi' ? 'рднрд╛рд╖рд╛рдПрдВ' : 'Languages', color: 'text-amber-600' }
            ].map((stat, index) => (
              <div key={index}>
                <div className={`text-3xl font-bold ${stat.color} mb-2`}>{stat.value}</div>
                <div className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                  {stat.label}
                </div>
              </div>
            ))}
          </div>
        </section>
      </main>

      {/* Clean App Metrics Dashboard */}
      {appMetrics && (
        <section className="bg-white dark:bg-neutral-800 py-12 border-t border-neutral-200 dark:border-neutral-700">
          <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
            <h2 className="text-3xl font-bold text-center mb-8 text-neutral-900 dark:text-white">
              {language === 'hi' ? 'рдРрдк рд╕реНрдЯреЗрдЯрд┐рд╕реНрдЯрд┐рдХреНрд╕' : 'App Statistics'}
            </h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
              {[
                { 
                  icon: TrendingUp, 
                  value: appMetrics.totalUsers, 
                  label: language === 'hi' ? 'рдХреБрд▓ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛' : 'Total Users',
                  color: 'text-blue-600',
                  bg: 'bg-blue-50 dark:bg-blue-900/20'
                },
                { 
                  icon: BookOpen, 
                  value: appMetrics.schemesAvailable, 
                  label: language === 'hi' ? 'рдЙрдкрд▓рдмреНрдз рдпреЛрдЬрдирд╛рдПрдВ' : 'Available Schemes',
                  color: 'text-green-600',
                  bg: 'bg-green-50 dark:bg-green-900/20'
                },
                { 
                  icon: FileCheck, 
                  value: appMetrics.successfulApplications, 
                  label: language === 'hi' ? 'рд╕рдлрд▓ рдЖрд╡реЗрджрди' : 'Successful Applications',
                  color: 'text-orange-500',
                  bg: 'bg-orange-50 dark:bg-orange-900/20'
                },
                { 
                  icon: Clock, 
                  value: `${loadTime}ms`, 
                  label: language === 'hi' ? 'рд▓реЛрдб рдЯрд╛рдЗрдо' : 'Load Time',
                  color: 'text-amber-600',
                  bg: 'bg-amber-50 dark:bg-amber-900/20'
                }
              ].map((stat, index) => (
                <div key={index} className={`text-center p-4 rounded-lg ${stat.bg}`}>
                  <stat.icon className={`w-6 h-6 ${stat.color} mx-auto mb-2`} />
                  <div className={`text-2xl font-bold ${stat.color} mb-1`}>{stat.value}</div>
                  <div className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                    {stat.label}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>
      )}

      {/* Simplified Footer */}
      <footer className="bg-neutral-800 text-white py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <p className="text-base font-normal text-neutral-300">
            {language === 'hi' 
              ? '┬й 2024 рд╕реНрдХреАрдо рд╕рд╛рдереА. рднрд╛рд░рдд рдХреЗ рд▓реЛрдЧреЛрдВ рдХреЗ рд▓рд┐рдП рдмрдирд╛рдпрд╛ рдЧрдпрд╛ ЁЯЗоЁЯЗ│'
              : '┬й 2024 Scheme Saathi. Built for the people of India ЁЯЗоЁЯЗ│'
            }
          </p>
          <p className="text-sm font-medium text-neutral-400 mt-2">
            {language === 'hi'
              ? 'рддрдХрдиреАрдХ рдФрд░ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдирд╛рдЧрд░рд┐рдХреЛрдВ рдХреЛ рд╕рд╢рдХреНрдд рдмрдирд╛рдирд╛'
              : 'Empowering citizens through technology and government schemes'
            }
          </p>
        </div>
      </footer>

      {/* Simplified Floating Help Button */}
      <button
        onClick={openSmartHelp}
        className="fixed bottom-6 right-6 bg-green-600 hover:bg-green-700 text-white p-3 rounded-full shadow-lg transition-all duration-300 z-50"
        aria-label="Smart Help"
        title={language === 'hi' ? 'рд╕реНрдорд╛рд░реНрдЯ рд╕рд╣рд╛рдпрддрд╛ - рддреБрд░рдВрдд рдорджрдж рдкрд╛рдПрдВ' : 'Smart Help - Get instant help'}
      >
        <HelpCircle className="w-5 h-5" />
      </button>

      {/* Help Modal */}
      {isHelpOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold">
                {language === 'hi' ? 'я┐╜ рд╡рд┐рд╕реНрддреГрдд рд╕рд╣рд╛рдпрддрд╛' : 'я┐╜ Detailed Help'}
              </h3>
              <button 
                onClick={() => setIsHelpOpen(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            {/* Help Categories */}
            <div className="mb-6">
              <h4 className="font-semibold mb-3">
                {language === 'hi' ? 'рд╕рд╣рд╛рдпрддрд╛ рд╢реНрд░реЗрдгреА рдЪреБрдиреЗрдВ:' : 'Choose Help Category:'}
              </h4>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                {Object.keys(helpContent).map((key) => (
                  <button
                    key={key}
                    onClick={() => setHelpCategory(key)}
                    className={`p-2 rounded-lg text-sm font-medium transition-colors ${
                      helpCategory === key 
                        ? 'bg-blue-500 text-white' 
                        : 'bg-gray-100 hover:bg-gray-200'
                    }`}
                  >
                    {helpContent[key].title}
                  </button>
                ))}
              </div>
            </div>

            {/* Enhanced Help Actions */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-4">
              <button
                onClick={startTutorial}
                className="flex items-center justify-center gap-2 bg-purple-500 hover:bg-purple-600 text-white py-2 px-4 rounded-lg transition-colors"
              >
                <span className="text-lg">ЁЯОп</span>
                {language === 'hi' ? 'рд╡рд┐рдЬреБрдЕрд▓ рдЯреНрдпреВрдЯреЛрд░рд┐рдпрд▓' : 'Visual Tutorial'}
              </button>
              <button
                onClick={() => setHelpCategory('troubleshooting')}
                className="flex items-center justify-center gap-2 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-lg transition-colors"
              >
                <span className="text-lg">ЁЯФз</span>
                {language === 'hi' ? 'рд╕рдорд╕реНрдпрд╛ рд╕рдорд╛рдзрд╛рди' : 'Troubleshooting'}
              </button>
            </div>

            {/* Current Help Content */}
            <div className="bg-blue-50 rounded-lg p-4 mb-4">
              <h4 className="font-bold text-lg mb-3">
                {helpContent[helpCategory].title}
              </h4>
              
              {/* Audio Button */}
              <button
                onClick={() => speakHelp(helpCategory)}
                className="w-full flex items-center justify-center gap-3 bg-green-500 hover:bg-green-600 text-white py-3 px-4 rounded-lg transition-colors mb-4"
              >
                <Volume2 className="w-5 h-5" />
                {language === 'hi' ? 'ЁЯФК рд╕реБрдирдХрд░ рд╕рдордЭреЗрдВ' : 'ЁЯФК Listen to Instructions'}
              </button>

              {/* Step by Step Instructions */}
              <div className="space-y-2">
                <h5 className="font-semibold">
                  {language === 'hi' ? 'ЁЯУЭ рд╕реНрдЯреЗрдк рдмрд╛рдИ рд╕реНрдЯреЗрдк рдЧрд╛рдЗрдб:' : 'ЁЯУЭ Step by Step Guide:'}
                </h5>
                {helpContent[helpCategory].steps.map((step, index) => (
                  <div key={index} className="flex items-start space-x-2">
                    <span className="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold flex-shrink-0 mt-0.5">
                      {index + 1}
                    </span>
                    <span className="text-sm">{step}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Quick Tips */}
            <div className="bg-yellow-50 rounded-lg p-4">
              <h5 className="font-semibold mb-2">
                {language === 'hi' ? 'ЁЯТб рдЦрд╛рд╕ рдмрд╛рддреЗрдВ:' : 'ЁЯТб Quick Tips:'}
              </h5>
              <div className="text-sm space-y-1">
                {language === 'hi' ? (
                  <>
                    <p>тАв рдЗрдВрдЯрд░рдиреЗрдЯ рд╕реНрд▓реЛ рд╣реЛ рддреЛ рдзреИрд░реНрдп рд░рдЦреЗрдВ</p>
                    <p>тАв рдлреЛрдЯреЛ рдЦреАрдВрдЪрддреЗ рд╕рдордп рд░реЛрд╢рдиреА рдЕрдЪреНрдЫреА рд░рдЦреЗрдВ</p>
                    <p>тАв рд╕рднреА рдЬрд╛рдирдХрд╛рд░реА рд╕рд╣реА-рд╕рд╣реА рднрд░реЗрдВ</p>
                    <p>тАв рд╕рдорд╕реНрдпрд╛ рд╣реЛ рддреЛ рд╣реЗрд▓реНрдк рдмрдЯрди рджрдмрд╛рдПрдВ</p>
                  </>
                ) : (
                  <>
                    <p>тАв Be patient if internet is slow</p>
                    <p>тАв Keep good lighting while taking photos</p>
                    <p>тАв Fill all information correctly</p>
                    <p>тАв Press help button if any problem</p>
                  </>
                )}
              </div>
            </div>

            {/* Emergency Contact */}
            <div className="mt-4 p-3 bg-red-50 rounded-lg">
              <h5 className="font-semibold text-red-800 mb-1">
                {language === 'hi' ? 'ЁЯУЮ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛:' : 'ЁЯУЮ Emergency Help:'}
              </h5>
              <p className="text-sm text-red-700">
                {language === 'hi' 
                  ? 'рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 1800-111-3333 (рдЯреЛрд▓ рдлреНрд░реА)'
                  : 'Helpline: 1800-111-3333 (Toll Free)'
                }
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Visual Tutorial Overlay */}
      {showTutorial && tutorialStep < tutorialSteps.length && (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <div className="text-center">
              <div className="text-4xl mb-4">ЁЯОп</div>
              <h3 className="text-lg font-bold mb-2">
                {tutorialSteps[tutorialStep].title}
              </h3>
              <p className="text-gray-600 mb-4">
                {tutorialSteps[tutorialStep].description}
              </p>
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-500">
                  Step {tutorialStep + 1} of {tutorialSteps.length}
                </span>
                <div className="space-x-2">
                  <button
                    onClick={() => setShowTutorial(false)}
                    className="px-3 py-1 text-gray-500 hover:text-gray-700"
                  >
                    {language === 'hi' ? 'рдЫреЛрдбрд╝реЗрдВ' : 'Skip'}
                  </button>
                  <button
                    onClick={nextTutorialStep}
                    className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg"
                  >
                    {tutorialStep < tutorialSteps.length - 1 
                      ? (language === 'hi' ? 'рдЕрдЧрд▓рд╛' : 'Next')
                      : (language === 'hi' ? 'рд╕рдорд╛рдкреНрдд' : 'Finish')
                    }
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Modals - render at the very end for proper z-index layering */}
      <Sidebar 
        isOpen={isSidebarOpen} 
        onClose={() => setIsSidebarOpen(false)}
        onOpenSettings={handleOpenSettings}
      />
      <UploadModal 
        isOpen={isUploadModalOpen} 
        onClose={() => setIsUploadModalOpen(false)} 
      />
      <SettingsModal
        isOpen={isSettingsOpen}
        onClose={() => setIsSettingsOpen(false)}
      />

      {/* Sign In Modal */}
      {isSignInOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white dark:bg-neutral-800 rounded-lg p-6 max-w-md w-full">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-neutral-900 dark:text-white">
                {language === 'hi' ? 'рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ' : 'Sign In'}
              </h3>
              <button 
                onClick={() => setIsSignInOpen(false)}
                className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            
            <form onSubmit={(e) => {
              e.preventDefault();
              const formData = new FormData(e.target as HTMLFormElement);
              handleSignIn({
                email: formData.get('email'),
                password: formData.get('password')
              });
            }}>
              {/* Google Sign In Button */}
              <div className="mb-4">
                <button
                  type="button"
                  onClick={handleGoogleSignIn}
                  className="w-full flex items-center justify-center gap-3 px-4 py-2.5 border border-neutral-300 dark:border-neutral-600 rounded-md bg-white dark:bg-neutral-700 text-neutral-700 dark:text-neutral-200 hover:bg-neutral-50 dark:hover:bg-neutral-600 transition-colors"
                >
                  <FaGoogle className="w-4 h-4 text-red-500" />
                  {language === 'hi' ? 'Google рдХреЗ рд╕рд╛рде рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ' : 'Continue with Google'}
                </button>
              </div>

              {/* Divider */}
              <div className="relative mb-4">
                <div className="absolute inset-0 flex items-center">
                  <div className="w-full border-t border-neutral-300 dark:border-neutral-600"></div>
                </div>
                <div className="relative flex justify-center text-sm">
                  <span className="px-2 bg-white dark:bg-neutral-800 text-neutral-500 dark:text-neutral-400">
                    {language === 'hi' ? 'рдпрд╛' : 'or'}
                  </span>
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">
                    {language === 'hi' ? 'рдИрдореЗрд▓' : 'Email'}
                  </label>
                  <input
                    type="email"
                    name="email"
                    required
                    className="w-full px-3 py-2 border border-neutral-300 dark:border-neutral-600 rounded-md focus:ring-2 focus:ring-blue-600 focus:border-transparent bg-white dark:bg-neutral-700 text-neutral-900 dark:text-white"
                    placeholder={language === 'hi' ? 'рдЖрдкрдХрд╛ рдИрдореЗрд▓' : 'Your email'}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">
                    {language === 'hi' ? 'рдкрд╛рд╕рд╡рд░реНрдб' : 'Password'}
                  </label>
                  <input
                    type="password"
                    name="password"
                    required
                    className="w-full px-3 py-2 border border-neutral-300 dark:border-neutral-600 rounded-md focus:ring-2 focus:ring-blue-600 focus:border-transparent bg-white dark:bg-neutral-700 text-neutral-900 dark:text-white"
                    placeholder={language === 'hi' ? 'рдЖрдкрдХрд╛ рдкрд╛рд╕рд╡рд░реНрдб' : 'Your password'}
                  />
                </div>
              </div>
              
              <div className="mt-6 flex gap-3">
                <button
                  type="button"
                  onClick={() => setIsSignInOpen(false)}
                  className="flex-1 px-4 py-2 text-neutral-700 dark:text-neutral-300 border border-neutral-300 dark:border-neutral-600 rounded-md hover:bg-neutral-50 dark:hover:bg-neutral-700 transition-colors"
                >
                  {language === 'hi' ? 'рд░рджреНрдж рдХрд░реЗрдВ' : 'Cancel'}
                </button>
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  {language === 'hi' ? 'рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ' : 'Sign In'}
                </button>
              </div>
              
              <div className="mt-4 text-center">
                <button
                  type="button"
                  onClick={() => {
                    setIsSignInOpen(false);
                    setIsSignUpOpen(true);
                  }}
                  className="text-sm text-blue-600 hover:text-blue-700 transition-colors"
                >
                  {language === 'hi' ? 'рдЦрд╛рддрд╛ рдирд╣реАрдВ рд╣реИ? рд╕рд╛рдЗрди рдЕрдк рдХрд░реЗрдВ' : "Don't have an account? Sign Up"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Sign Up Modal */}
      {isSignUpOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white dark:bg-neutral-800 rounded-lg p-6 max-w-md w-full">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-neutral-900 dark:text-white">
                {language === 'hi' ? 'рд╕рд╛рдЗрди рдЕрдк рдХрд░реЗрдВ' : 'Sign Up'}
              </h3>
              <button 
                onClick={() => setIsSignUpOpen(false)}
                className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            
            <form onSubmit={(e) => {
              e.preventDefault();
              const formData = new FormData(e.target as HTMLFormElement);
              handleSignUp({
                name: formData.get('name'),
                email: formData.get('email'),
                password: formData.get('password')
              });
            }}>
              {/* Google Sign Up Button */}
              <div className="mb-4">
                <button
                  type="button"
                  onClick={handleGoogleSignIn}
                  className="w-full flex items-center justify-center gap-3 px-4 py-2.5 border border-neutral-300 dark:border-neutral-600 rounded-md bg-white dark:bg-neutral-700 text-neutral-700 dark:text-neutral-200 hover:bg-neutral-50 dark:hover:bg-neutral-600 transition-colors"
                >
                  <FaGoogle className="w-4 h-4 text-red-500" />
                  {language === 'hi' ? 'Google рдХреЗ рд╕рд╛рде рд╕рд╛рдЗрди рдЕрдк рдХрд░реЗрдВ' : 'Continue with Google'}
                </button>
              </div>

              {/* Divider */}
              <div className="relative mb-4">
                <div className="absolute inset-0 flex items-center">
                  <div className="w-full border-t border-neutral-300 dark:border-neutral-600"></div>
                </div>
                <div className="relative flex justify-center text-sm">
                  <span className="px-2 bg-white dark:bg-neutral-800 text-neutral-500 dark:text-neutral-400">
                    {language === 'hi' ? 'рдпрд╛' : 'or'}
                  </span>
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">
                    {language === 'hi' ? 'рдирд╛рдо' : 'Name'}
                  </label>
                  <input
                    type="text"
                    name="name"
                    required
                    className="w-full px-3 py-2 border border-neutral-300 dark:border-neutral-600 rounded-md focus:ring-2 focus:ring-blue-600 focus:border-transparent bg-white dark:bg-neutral-700 text-neutral-900 dark:text-white"
                    placeholder={language === 'hi' ? 'рдЖрдкрдХрд╛ рдирд╛рдо' : 'Your name'}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">
                    {language === 'hi' ? 'рдИрдореЗрд▓' : 'Email'}
                  </label>
                  <input
                    type="email"
                    name="email"
                    required
                    className="w-full px-3 py-2 border border-neutral-300 dark:border-neutral-600 rounded-md focus:ring-2 focus:ring-blue-600 focus:border-transparent bg-white dark:bg-neutral-700 text-neutral-900 dark:text-white"
                    placeholder={language === 'hi' ? 'рдЖрдкрдХрд╛ рдИрдореЗрд▓' : 'Your email'}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">
                    {language === 'hi' ? 'рдкрд╛рд╕рд╡рд░реНрдб' : 'Password'}
                  </label>
                  <input
                    type="password"
                    name="password"
                    required
                    className="w-full px-3 py-2 border border-neutral-300 dark:border-neutral-600 rounded-md focus:ring-2 focus:ring-blue-600 focus:border-transparent bg-white dark:bg-neutral-700 text-neutral-900 dark:text-white"
                    placeholder={language === 'hi' ? 'рдЖрдкрдХрд╛ рдкрд╛рд╕рд╡рд░реНрдб' : 'Your password'}
                  />
                </div>
              </div>
              
              <div className="mt-6 flex gap-3">
                <button
                  type="button"
                  onClick={() => setIsSignUpOpen(false)}
                  className="flex-1 px-4 py-2 text-neutral-700 dark:text-neutral-300 border border-neutral-300 dark:border-neutral-600 rounded-md hover:bg-neutral-50 dark:hover:bg-neutral-700 transition-colors"
                >
                  {language === 'hi' ? 'рд░рджреНрдж рдХрд░реЗрдВ' : 'Cancel'}
                </button>
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  {language === 'hi' ? 'рд╕рд╛рдЗрди рдЕрдк рдХрд░реЗрдВ' : 'Sign Up'}
                </button>
              </div>
              
              <div className="mt-4 text-center">
                <button
                  type="button"
                  onClick={() => {
                    setIsSignUpOpen(false);
                    setIsSignInOpen(true);
                  }}
                  className="text-sm text-blue-600 hover:text-blue-700 transition-colors"
                >
                  {language === 'hi' ? 'рдкрд╣рд▓реЗ рд╕реЗ рдЦрд╛рддрд╛ рд╣реИ? рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ' : 'Already have an account? Sign In'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
      
      {/* Offline Indicator */}
      <OfflineIndicator />
    </div>
  );
}